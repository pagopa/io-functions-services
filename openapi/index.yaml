openapi: 3.0.1
info:
  title: IO API for Public Administration Services
  description: >
    # Warning

    **This is an experimental API that is (most probably) going to change as we
    evolve the IO platform.**

    # Introduction

    This is the documentation of the IO API for 3rd party services. This API
    enables Public Administration services to integrate with the IO platform. IO
    enables services to communicate with Italian citizens via the [IO
    app](https://io.italia.it/).

    # How to get an API key

    To get access to this API, you'll need to register on the [IO Developer
    Portal](https://developer.io.italia.it/).

    After the registration step, you have to click on the button that says
    `subscribe to the digital citizenship api` to receive the API key that you
    will use to authenticate the API calls.

    You will also receive an email with further instructions, including a fake
    Fiscal Code that you will be able to use to send test messages. Messages
    sent to the fake Fiscal Code will be notified to the email address used
    during the registration process on the developer portal.

    # Messages

    ## What is a message

    Messages are the primary form of communication enabled by the IO APIs.
    Messages are **personal** communications directed to a **specific citizen**.
    You will not be able to use this API to broadcast a message to a group of
    citizens, you will have to create and send a specific, personalized message
    to each citizen you want to communicate to.

    The recipient of the message (i.e. a citizen) is identified trough his
    [Fiscal Code](https://it.wikipedia.org/wiki/Codice_fiscale).

    ## Message format

    A message is conceptually very similar to an email and, in its simplest
    form, is composed of the following attributes:

      * A required `subject`: a short description of the topic.
      * A required `markdown` body: a Markdown representation of the body (see
        below on what Markdown tags are allowed).
      * An optional `payment_data`: in case the message is a payment request,
        the _payment data_ will enable the recipient to pay the requested amount
        via [PagoPA](https://www.agid.gov.it/it/piattaforme/pagopa).
      * An optional `due_date`: a _due date_ that let the recipient
        add a reminder when receiving the message. The format for all
        dates is [ISO8601](https://it.wikipedia.org/wiki/ISO_8601) with time
        information and UTC timezone (ie. "2018-10-13T00:00:00.000Z").
      * An optional `feature_level_type`: the kind of the submitted message.

        It can be:
        - `STANDARD` for normal messages;
        - `ADVANCED` to enable premium features.
        
        Default is `STANDARD`.

    ## Allowed Markdown formatting

    Not all Markdown formatting is currently available. Currently you can use
    the following formatting:

      * Headings
      * Text stylings (bold, italic, etc...)
      * Lists (bullet and numbered)

    ## Sending a message to a citizen

    Not every citizen will be interested in what you have to say and not every
    citizen you want to communicate to will be registered on IO. For this
    reason, before sending a message you need to check whether the recipient is
    registered on the platform and that he has not yet opted out from receiving
    messages from you.

    The process for sending a message is made of 3 steps:

      1. Call [getProfile](#operation/getProfile): if the profile does not exist
         (i.e. you get a 404 response) or if the recipient has opted-out from
         your service (the response contains `sender_allowed: false`), you
         cannot send the message and you must stop here.
      1. Call [submitMessageforUser](#operation/submitMessageforUser) to submit
         a new message.
      1. (optional) Call [getMessage](#operation/getMessage) to check whether
         the message has been notified to the recipient.
  contact:
    name: PagoPA S.p.A.
    url: https://docs.pagopa.it/io-guida-tecnica/
  version: 3.25.3
  x-logo:
    url: https://io.italia.it/assets/img/io-logo-blue.svg
servers:
  - url: https://api.io.pagopa.it/api/v1
security:
  - SubscriptionKey: []
paths:
  /legal-messages/{legalmail}:
    post:
      summary: Submit a Legal Message passing the user fiscal_code in the request body
      description: >-
        Submits a legal message to a user on behalf of a service identitfied by
        legalMail

        On error, the reason is returned in the response payload.
      operationId: submitLegalMessageforUserWithFiscalCodeInBodyOnBehalfOfService
      parameters:
        - $ref: '#/components/parameters/LegalMail'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMessage'
        required: false
      responses:
        '201':
          description: Message created.
          headers:
            Location:
              description: >-
                Location (URL) of created message resource.

                A GET request to this URL returns the message status and
                details.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedMessage'
              example:
                id: 01BX9NSMKVXXS5PSP2FATZMYYY
        '400':
          description: Invalid payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden.
          content: {}
        '404':
          description: Not Found.
          content: {}
        '429':
          description: Too many requests
          content: {}
        '500':
          description: The message cannot be delivered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
      x-codegen-request-body-name: message
  /messages:
    post:
      summary: Submit a Message passing the user fiscal_code in the request body
      description: >-
        Submits a message to a user with STANDARD or ADVANCED features based on
        `feature_level_type` value.

        On error, the reason is returned in the response payload.

        In order to call `submitMessageforUser`, before sending any message,

        the sender MUST call `getProfile` and check that the profile exists

        (for the specified fiscal code) and that the `sender_allowed` field

        of the user's profile it set to `true`.
      operationId: submitMessageforUserWithFiscalCodeInBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMessage'
        required: false
      responses:
        '201':
          description: Message created.
          headers:
            Location:
              description: >-
                Location (URL) of created message resource.

                A GET request to this URL returns the message status and
                details.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedMessage'
              example:
                id: 01BX9NSMKVXXS5PSP2FATZMYYY
        '400':
          description: Invalid payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden.
          content: {}
        '429':
          description: Too many requests
          content: {}
        '500':
          description: The message cannot be delivered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
      x-codegen-request-body-name: message
  /messages/{fiscal_code}:
    post:
      summary: Submit a Message passing the user fiscal_code as path parameter
      description: |-
        Submits a message to a user.
        On error, the reason is returned in the response payload.
        In order to call `submitMessageforUser`, before sending any message,
        the sender MUST call `getProfile` and check that the profile exists
        (for the specified fiscal code) and that the `sender_allowed` field
        of the user's profile it set to `true`.
      operationId: submitMessageforUser
      parameters:
        - $ref: '#/components/parameters/FiscalCode'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMessage'
        required: false
      responses:
        '201':
          description: Message created.
          headers:
            Location:
              description: >-
                Location (URL) of created message resource.

                A GET request to this URL returns the message status and
                details.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The identifier of the created message.
              example:
                id: 01BX9NSMKVXXS5PSP2FATZMYYY
        '400':
          description: Invalid payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden.
          content: {}
        '429':
          description: Too many requests
          content: {}
        '500':
          description: The message cannot be delivered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
      x-codegen-request-body-name: message
  /messages/{fiscal_code}/{id}:
    get:
      summary: Get Message
      description: |-
        The previously created message with the provided message ID is
        returned. With right permission and `ADVANCED` feature level type
        related to the previously submitted message, also read and payment
        status infos (when applicable) are returned.
      operationId: getMessage
      parameters:
        - $ref: '#/components/parameters/FiscalCode'
        - name: id
          in: path
          description: The ID of the message.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Message found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalMessageResponseWithContent'
              example:
                status: PROCESSED
                message:
                  id: 01BX9NSMKAAAS5PSP2FATZM6BQ
                  fiscal_code: QXJNTX9RCRVD6V4O
                  time_to_live: 3600
                  content:
                    subject: message subject, aliquip sint nulla in estinut
                    markdown: >-
                      Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                      Maecenas et mollis felis.

                      Vivamus orci nisl, commodo ut sodales ut, eleifend a
                      libero. Donec dapibus, turpis in mattis tempor,

                      risus nunc malesuada ex, non aliquet metus nunc a lacus.
                      Aenean in arcu vitae nisl porta

                      fermentum nec non nibh. Phasellus tortor tellus, semper in
                      metus eget, eleifend

                      laoreet nibh. Aenean feugiat lectus ut nisl eleifend
                      gravida.
                  sender_service_id: 01BX9NSMKVXXS5PSP2FATZM6QX
                notification:
                  email: QUEUED
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden.
          content: {}
        '404':
          description: No message found for the provided ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '429':
          description: Too many requests
          content: {}
  /profiles:
    post:
      summary: Get a User Profile using POST
      description: >-
        Returns the preferences for the user identified by the

        fiscal code provided in the request body. The field `sender_allowed` is
        set fo `false` in case

        the service which is calling the API has been disabled by the user.
      operationId: getProfileByPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FiscalCodePayload'
        required: false
      responses:
        '200':
          description: Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitedProfile'
              example:
                email: foobar@example.com
                version: 1
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden.
          content: {}
        '404':
          description: No user found for the provided fiscal code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '429':
          description: Too many requests
          content: {}
      x-codegen-request-body-name: payload
  /profiles/{fiscal_code}:
    get:
      summary: Get a User Profile
      description: |-
        Returns the preferences for the user identified by the provided
        fiscal code. The field `sender_allowed` is set fo `false` in case
        the service which is calling the API has been disabled by the user.
      operationId: getProfile
      parameters:
        - $ref: '#/components/parameters/FiscalCode'
      responses:
        '200':
          description: Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitedProfile'
              example:
                email: foobar@example.com
                version: 1
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden.
          content: {}
        '404':
          description: No user found for the provided fiscal code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '429':
          description: Too many requests
          content: {}
  /subscriptions-feed/{date}:
    get:
      summary: Get Subscriptions Feed
      description: >-
        Returns the **hashed fiscal codes** of users that **subscribed to** or

        **unsubscribed from** your service **on the provided date** (UTC).


        By querying this feed everyday, you will be able to retrieve the

        "delta" of users that subscribed and unsubscribed from your service.

        You will have to keep a list of users somewhere in your infrastructure

        that you will keep updated at all times by adding the subscribed users
        and

        removing the unsubscribed users.


        You will then be able to query this local list to know which users you

        can send messages, to without having to query `getProfile` for each
        message.


        To avoid sharing the citizens fiscal codes, the API will

        provide the hex encoding of the SHA256 hash of the upper case fiscal
        code.

        In pseudo code `CF_HASH = LOWERCASE(HEX(SHA256(UPPERCASE(CF))))`.


        Access to this feed is subject to case-by-case authorization, and it is

        primarily intended for large-scale services, such as those pertaining

        to organizations that have an extensive user base (including
        geographically),

        and/or need to send very high volumes of messages per day.


        This feed serves the purpose of minimizing data processing activities

        while preserving optimization of API calls and data accuracy.

        Organizations allowed are required to query this feed everyday.
      operationId: getSubscriptionsFeedForDate
      parameters:
        - $ref: '#/components/parameters/DateUTC'
      responses:
        '200':
          description: Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionsFeed'
              example:
                dateUTC: '2019-09-03'
                subscriptions:
                  - >-
                    e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                unsubscriptions: []
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden.
          content: {}
        '404':
          description: Subscriptions feed not available yet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '429':
          description: Too many requests
          content: {}
  /services:
    get:
      summary: Get User Services
      description: |
        Retrieve the identifiers of the services owned by the calling user
      operationId: getUserServices
      responses:
        '200':
          description: The list of service ids.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceIdCollection'
        '401':
          description: Unauthorized.
          content: {}
        '429':
          description: Too many requests.
          content: {}
    post:
      summary: Create Service
      description: >
        Create a new Service with the attributes provided in the request
        payload.
      operationId: createService
      requestBody:
        description: |-
          A service can invoke the IO API by providing the relative API key
          (every service has an associated primary and secondary API key).
          Through the API a service can send messages to the IO users
          that haven't opted out from it. Service metadata are used
          to qualify the sender of these messages to the recipient.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicePayload'
        required: false
      responses:
        '200':
          description: Service created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceWithSubscriptionKeys'
        '400':
          description: Invalid payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '401':
          description: Unauthorized.
          content: {}
        '403':
          description: Forbidden.
          content: {}
        '429':
          description: Too many requests.
          content: {}
        '500':
          description: The service cannot be created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
      x-codegen-request-body-name: body
  /services/{service_id}:
    get:
      summary: Get Service
      description: |
        Retrieve a previously created service with the provided service ID.
        This API operation needs the same API key of the service being retrieved
        otherwise 403 forbidden will be returned to the caller.
      operationId: getService
      responses:
        '200':
          description: Service found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceWithSubscriptionKeys'
        '401':
          description: Unauthorized.
          content: {}
        '403':
          description: Forbidden.
          content: {}
        '404':
          description: No service found for the provided ID.
          content: {}
        '429':
          description: Too many requests.
          content: {}
    put:
      summary: Update Service
      description: |-
        Update a previously created service with the provided service ID
        This API operation needs the same API key of the service being retrieved
        otherwise 403 forbidden will be returned to the caller.
      operationId: updateService
      requestBody:
        description: The updated service payload.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicePayload'
        required: false
      responses:
        '200':
          description: Service updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceWithSubscriptionKeys'
        '401':
          description: Unauthorized.
          content: {}
        '403':
          description: Forbidden.
          content: {}
        '404':
          description: No service found for the provided ID.
          content: {}
        '429':
          description: Too many requests.
          content: {}
        '500':
          description: The service cannot be updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
      x-codegen-request-body-name: body
    parameters:
      - name: service_id
        in: path
        description: The ID of an existing Service.
        required: true
        schema:
          type: string
  /services/{service_id}/logo:
    put:
      summary: Upload service logo.
      description: |
        Upsert a logo for an existing service.
        This API operation needs the same API key of the service being retrieved
        otherwise 403 forbidden will be returned to the caller.
      operationId: uploadServiceLogo
      requestBody:
        description: >-
          A base64 string representation of the service logo PNG image. It can
          be the service own logo or the organization logo.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Logo'
        required: true
      responses:
        '200':
          description: Logo uploaded.
          content: {}
        '400':
          description: Invalid payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '401':
          description: Unauthorized.
          content: {}
        '403':
          description: Forbidden.
          content: {}
        '404':
          description: No service found for the provided ID.
          content: {}
        '500':
          description: The service logo cannot be uploaded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
      x-codegen-request-body-name: body
    parameters:
      - name: service_id
        in: path
        description: The ID of an existing Service.
        required: true
        schema:
          type: string
  /services/{service_id}/keys:
    put:
      summary: Regenerate Service Key
      description: >-
        Regenerate the specified key for the Service identified by the provided
        id.

        This API operation needs the same API key of the service being retrieved

        otherwise 403 forbidden will be returned to the caller.
      operationId: regenerateServiceKey
      parameters:
        - name: service_id
          in: path
          description: The ID of an existing Service.
          required: true
          schema:
            type: string
      requestBody:
        description: The type of the key to be regenerated (PRIMARY_KEY or SECONDARY_KEY).
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionKeyTypePayload'
        required: true
      responses:
        '200':
          description: The subscription keys for the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionKeys'
        '400':
          description: Invalid payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '403':
          description: Forbidden.
          content: {}
        '404':
          description: Service not found.
          content: {}
        '500':
          description: Cannot regenerate service key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
      x-codegen-request-body-name: body
  /organizations/{organization_fiscal_code}/logo:
    put:
      summary: Upload organization logo.
      description: |
        Upsert a logo for an Organization.
      operationId: uploadOrganizationLogo
      requestBody:
        description: A base64 string representation of the organization logo PNG image.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Logo'
        required: true
      responses:
        '202':
          description: Logo uploaded.
          content: {}
        '400':
          description: Invalid payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '401':
          description: Unauthorized.
          content: {}
        '403':
          description: Forbidden.
          content: {}
        '429':
          description: Too many requests.
          content: {}
        '500':
          description: The organization logo cannot be uploaded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
      x-codegen-request-body-name: body
    parameters:
      - $ref: '#/components/parameters/OrganizationFiscalCode'
  /activations/:
    put:
      summary: Upsert a Service Activation for a User
      description: Create or update an Activation for a couple Service/User
      operationId: upsertServiceActivation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivationPayload'
        required: false
      responses:
        '200':
          description: Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
              example:
                serviceId: AAAAAAAAAAAAAAA
                fiscalCode: AAAAAA00B00C000D
                status: ACTIVE
                version: 1
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden.
          content: {}
        '404':
          description: No user activation found for the provided fiscal code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '429':
          description: Too many requests
          content: {}
        '500':
          description: The activation cannot be created or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
      x-codegen-request-body-name: payload
    post:
      summary: Get a Service Activation for a User
      description: Returns the current Activation for a couple Service/User
      operationId: getServiceActivationByPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FiscalCodePayload'
        required: false
      responses:
        '200':
          description: Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
              example:
                serviceId: AAAAAAAAAAAAAAA
                fiscalCode: AAAAAA00B00C000D
                status: ACTIVE
                version: 1
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden.
          content: {}
        '404':
          description: No user activation found for the provided fiscal code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '429':
          description: Too many requests
          content: {}
        '500':
          description: Internal server error retrieving the Activation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
      x-codegen-request-body-name: payload
components:
  schemas:
    ActivationStatus:
      type: string
      x-extensible-enum:
        - ACTIVE
        - INACTIVE
        - PENDING
    Activation:
      type: object
      properties:
        service_id:
          $ref: '#/components/schemas/ServiceId'
        fiscal_code:
          $ref: '#/components/schemas/FiscalCode'
        status:
          $ref: '#/components/schemas/ActivationStatus'
        version:
          type: integer
          minimum: 0
      required:
        - service_id
        - fiscal_code
        - status
        - version
    ActivationPayload:
      type: object
      properties:
        fiscal_code:
          $ref: '#/components/schemas/FiscalCode'
        status:
          $ref: '#/components/schemas/ActivationStatus'
      required:
        - fiscal_code
        - status
    FiscalCodePayload:
      required:
        - fiscal_code
      type: object
      properties:
        fiscal_code:
          $ref: '#/components/schemas/FiscalCode'
    SubscriptionsFeed:
      required:
        - dateUTC
        - subscriptions
        - unsubscriptions
      type: object
      properties:
        dateUTC:
          $ref: '#/components/schemas/DateUTC'
        subscriptions:
          $ref: '#/components/schemas/SubscriptionsList'
        unsubscriptions:
          $ref: '#/components/schemas/SubscriptionsList'
    SubscriptionsList:
      type: array
      items:
        $ref: '#/components/schemas/FiscalCodeHash'
    FiscalCodeHash:
      maxLength: 16
      minLength: 16
      pattern: '[0-9a-f]{64}'
      type: string
      description: >-
        To avoid sharing the citizens fiscal codes, the API will

        provide the hex encoding of the SHA256 hash of the upper case fiscal
        code.
      x-example: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    DateUTC:
      maxLength: 10
      minLength: 10
      pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
      type: string
      description: A date in the format YYYY-MM-DD.
      x-example: '2019-09-15'
    ProblemJson:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: about:blank
          example: https://example.com/problem/constraint-violation
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in english and
            readable

            for engineers (usually not suited for non technical stakeholders and

            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: >-
            The HTTP status code generated by the origin server for this
            occurrence

            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 200
        detail:
          type: string
          description: |-
            A human readable explanation specific to this occurrence of the
            problem.
          example: There was an error processing the request
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the
            problem.

            It may or may not yield further information if dereferenced.
    NotificationChannelStatusValue:
      type: string
      description: >-
        The status of a notification (one for each channel).

        "SENT": the notification was succesfully sent to the channel (ie. email
        or push notification)

        "THROTTLED": a temporary failure caused a retry during the notification
        processing;
          the notification associated with this channel will be delayed for a maximum of 7 days or until the message expires
        "EXPIRED": the message expired before the notification could be sent;
          this means that the maximum message time to live was reached; no notification will be sent to this channel
        "FAILED": a permanent failure caused the process to exit with an error,
        no notification will be sent to this channel
      x-extensible-enum:
        - SENT
        - THROTTLED
        - EXPIRED
        - FAILED
      example: SENT
    MessageResponseWithContent:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/CreatedMessageWithContent'
        notification:
          $ref: '#/components/schemas/MessageResponseNotificationStatus'
        status:
          $ref: '#/components/schemas/MessageStatusValue'
      required:
        - message
    ExternalMessageResponseWithContent:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ExternalCreatedMessageWithContent'
        notification:
          $ref: '#/components/schemas/MessageResponseNotificationStatus'
        status:
          $ref: '#/components/schemas/MessageStatusValue'
        read_status:
          $ref: '#/components/schemas/ReadStatus'
          description: >-
            Describes whether a user has read the message or not

            NOTE  : This value is only available for ADVANCED messages

            NOTE 2: `UNAVAILABLE` will be returned if user revoked the
            permission to access to read status
        payment_status:
          $ref: '#/components/schemas/PaymentStatus'
          description: |-
            Describes the state of the related payment notice
            NOTE: This value is only available for ADVANCED payment messages
      required:
        - message
    MessageResponseNotificationStatus:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/NotificationChannelStatusValue'
        webhook:
          $ref: '#/components/schemas/NotificationChannelStatusValue'
    RejectedMessageStatusValue:
      type: string
      x-extensible-enum:
        - REJECTED
    NotRejectedMessageStatusValue:
      type: string
      x-extensible-enum:
        - ACCEPTED
        - THROTTLED
        - FAILED
        - PROCESSED
    MessageStatusValue:
      x-one-of: true
      allOf:
        - $ref: '#/components/schemas/RejectedMessageStatusValue'
        - $ref: '#/components/schemas/NotRejectedMessageStatusValue'
      description: >-
        The processing status of a message.

        "ACCEPTED": the message has been accepted and will be processed for
        delivery;
          we'll try to store its content in the user's inbox and notify him on his preferred channels
        "THROTTLED": a temporary failure caused a retry during the message
        processing;
          any notification associated with this message will be delayed for a maximum of 7 days
        "FAILED": a permanent failure caused the process to exit with an error,
        no notification will be sent for this message

        "PROCESSED": the message was succesfully processed and is now stored in
        the user's inbox;
          we'll try to send a notification for each of the selected channels
        "REJECTED": either the recipient does not exist, or the sender has been
        blocked
    ExternalCreatedMessageWithContent:
      allOf:
        - $ref: '#/components/schemas/CreatedMessageWithContent'
        - type: object
          properties:
            feature_level_type:
              $ref: '#/components/schemas/FeatureLevelType'
          required:
            - feature_level_type
    CreatedMessageWithContent:
      type: object
      properties:
        id:
          type: string
        fiscal_code:
          $ref: '#/components/schemas/FiscalCode'
        time_to_live:
          $ref: '#/components/schemas/TimeToLiveSeconds'
        created_at:
          $ref: '#/components/schemas/Timestamp'
        content:
          $ref: '#/components/schemas/NewMessageContent'
        sender_service_id:
          $ref: '#/components/schemas/ServiceId'
      required:
        - id
        - fiscal_code
        - created_at
        - content
        - sender_service_id
    EUCovidCert:
      type: object
      description: Paylod with access token to retrieve a EU Covid Certificate
      properties:
        auth_code:
          type: string
      required:
        - auth_code
    ThirdPartyData:
      type: object
      description: >-
        Payload containing all information needed to retrieve and visualize
        third party message details
      properties:
        id:
          type: string
          description: >-
            Unique id for retrieving third party enriched information about the
            message
          minLength: 1
        original_sender:
          type: string
          description: Either a ServiceId or a simple string representing the sender name
          minLength: 1
        original_receipt_date:
          $ref: '#/components/schemas/Timestamp'
        has_attachments:
          type: boolean
          default: false
        summary:
          type: string
          minLength: 1
      required:
        - id
    OrganizationFiscalCode:
      type: string
      description: Organization fiscal code.
      format: OrganizationFiscalCode
      x-import: '@pagopa/ts-commons/lib/strings'
      example: '12345678901'
    FiscalCode:
      type: string
      description: User's fiscal code.
      format: FiscalCode
      x-import: '@pagopa/ts-commons/lib/strings'
      example: SPNDNL80R13C555X
    LimitedProfile:
      description: |-
        Describes the citizen's profile, mostly interesting for preferences
        attributes.
      type: object
      properties:
        sender_allowed:
          type: boolean
          description: |-
            True in case the service that made the request can send
            messages to the user identified by this profile (false otherwise).
        preferred_languages:
          type: array
          items:
            type: string
            x-extensible-enum:
              - it_IT
              - en_GB
              - es_ES
              - de_DE
              - fr_FR
            example: it_IT
          description: >-
            Indicates the User's preferred written or spoken languages in order

            of preference. Generally used for selecting a localized User
            interface. Valid

            values are concatenation of the ISO 639-1 two letter language code,
            an underscore,

            and the ISO 3166-1 2 letter country code; e.g., 'en_US' specifies
            the language

            English and country US.
      required:
        - sender_allowed
    Timestamp:
      type: string
      format: UTCISODateFromString
      description: A date-time field in ISO-8601 format and UTC timezone.
      x-import: '@pagopa/ts-commons/lib/dates'
      example: '2018-10-13T00:00:00.000Z'
    TimeToLiveSeconds:
      type: integer
      default: 3600
      minimum: 3600
      maximum: 604800
      description: |-
        This parameter specifies for how long (in seconds) the system will
        try to deliver the message to the channels configured by the user.
      example: 3600
    PrescriptionData:
      type: object
      description: Metadata needed to process medical prescriptions.
      properties:
        nre:
          $ref: '#/components/schemas/PrescriptionNRE'
        iup:
          $ref: '#/components/schemas/PrescriptionIUP'
        prescriber_fiscal_code:
          $ref: '#/components/schemas/PrescriberFiscalCode'
      required:
        - nre
    PrescriptionNRE:
      description: >-
        The field *Numero ricetta elettronica* identifies the medical
        prescription at national level.
      type: string
      minLength: 15
      maxLength: 15
    PrescriptionIUP:
      description: >-
        The field *Identificativo Unico di Prescrizione* identifies the medical
        prescription at regional level.
      type: string
      minLength: 1
      maxLength: 16
    PrescriberFiscalCode:
      type: string
      description: Fiscal code of the Doctor that made the prescription.
      format: FiscalCode
      x-import: '@pagopa/ts-commons/lib/strings'
      example: TCNZRO80R13C555Y
    MessageContentBase:
      type: object
      properties:
        subject:
          type: string
          description: >-
            The (optional) subject of the message - note that only some
            notification

            channels support the display of a subject. When a subject is not
            provided,

            one gets generated from the client attributes.
          minLength: 10
          maxLength: 120
          example: Welcome new user !
        markdown:
          type: string
          description: >-
            The full version of the message, in plain text or Markdown format.
            The

            content of this field will be delivered to channels that don't have
            any

            limit in terms of content size (e.g. email, etc...).
          minLength: 80
          maxLength: 10000
          example: |-
            # This is a markdown header

            to show how easily markdown can be converted to **HTML**

            Remember: this has to be a long text.
      required:
        - subject
        - markdown
    MessageContent:
      allOf:
        - $ref: '#/components/schemas/MessageContentBase'
        - type: object
          properties:
            payment_data:
              $ref: '#/components/schemas/PaymentData'
            prescription_data:
              $ref: '#/components/schemas/PrescriptionData'
            legal_data:
              $ref: '#/components/schemas/LegalData'
            eu_covid_cert:
              $ref: '#/components/schemas/EUCovidCert'
            third_party_data:
              $ref: '#/components/schemas/ThirdPartyData'
            due_date:
              $ref: '#/components/schemas/Timestamp'
    NewMessageContent:
      allOf:
        - $ref: '#/components/schemas/MessageContentBase'
        - type: object
          properties:
            payment_data:
              $ref: '#/components/schemas/PaymentDataWithRequiredPayee'
            due_date:
              $ref: '#/components/schemas/Timestamp'
            prescription_data:
              $ref: '#/components/schemas/PrescriptionData'
            eu_covid_cert:
              $ref: '#/components/schemas/EUCovidCert'
            third_party_data:
              $ref: '#/components/schemas/ThirdPartyData'
            legal_data:
              $ref: '#/components/schemas/LegalData'
    NewMessage:
      type: object
      properties:
        time_to_live:
          $ref: '#/components/schemas/TimeToLiveSeconds'
        content:
          $ref: '#/components/schemas/MessageContent'
        default_addresses:
          type: object
          description: |-
            Default addresses for notifying the recipient of the message in case
            no address for the related channel is set in his profile.
          properties:
            email:
              type: string
              format: email
              example: foobar@example.com
        fiscal_code:
          $ref: '#/components/schemas/FiscalCode'
        feature_level_type:
          $ref: '#/components/schemas/FeatureLevelType'
      required:
        - content
    FeatureLevelType:
      type: string
      default: STANDARD
      x-extensible-enum:
        - STANDARD
        - ADVANCED
      example: STANDARD
    ReadStatus:
      type: string
      x-extensible-enum:
        - UNAVAILABLE
        - UNREAD
        - READ
      example: UNREAD
      description: Api definition of read status enumeration
    PaymentStatus:
      type: string
      description: Payment status enumeration
      x-extensible-enum:
        - PAID
        - NOT_PAID
      example: NOT_PAID
    CIDR:
      type: string
      description: Describes a single IP or a range of IPs.
      pattern: ^([0-9]{1,3}[.]){3}[0-9]{1,3}(/([0-9]|[1-2][0-9]|3[0-2]))?$
    ServicePayload:
      description: A payload used to create/update a service for a user.
      x-one-of: true
      allOf:
        - $ref: '#/components/schemas/VisibleServicePayload'
        - $ref: '#/components/schemas/HiddenServicePayload'
    HiddenServicePayload:
      description: A payload used to create/update a service that is hidden.
      allOf:
        - $ref: '#/components/schemas/CommonServicePayload'
        - type: object
          properties:
            is_visible:
              type: boolean
              default: false
              enum:
                - false
              description: It indicates that service is hidden
            service_metadata:
              description: >-
                That service can't handle some ServiceMetadata fields (es.
                category)
              $ref: '#/components/schemas/CommonServiceMetadata'
    VisibleServicePayload:
      description: >-
        A payload used to create/update a service that appears in the service
        list.
      allOf:
        - $ref: '#/components/schemas/CommonServicePayload'
        - type: object
          properties:
            is_visible:
              type: boolean
              enum:
                - true
              description: It indicates that service appears in the service list
            service_metadata:
              description: >-
                That service can't handle some ServiceMetadata fields (es.
                category)
              $ref: '#/components/schemas/CommonServiceMetadata'
          required:
            - is_visible
            - service_metadata
    ExtendedServicePayload:
      allOf:
        - $ref: '#/components/schemas/ServicePayload'
        - type: object
          properties:
            service_metadata:
              $ref: '#/components/schemas/ServiceMetadata'
    CommonServicePayload:
      description: Common properties for a ServicePayload
      type: object
      properties:
        service_name:
          $ref: '#/components/schemas/ServiceName'
        department_name:
          $ref: '#/components/schemas/DepartmentName'
        organization_name:
          $ref: '#/components/schemas/OrganizationName'
        organization_fiscal_code:
          $ref: '#/components/schemas/OrganizationFiscalCode'
        authorized_cidrs:
          description: >-
            Allowed source IPs or CIDRs for this service.

            When empty, every IP address it's authorized to call the IO API on
            behalf of the service.
          type: array
          items:
            $ref: '#/components/schemas/CIDR'
        version:
          type: integer
        require_secure_channels:
          type: boolean
          default: false
          description: When true, messages won't trigger email notifications (only push).
      required:
        - service_name
        - department_name
        - organization_name
        - organization_fiscal_code
        - authorized_cidrs
    Service:
      description: A service tied to user's subscription.
      allOf:
        - $ref: '#/components/schemas/ExtendedServicePayload'
        - type: object
          properties:
            id:
              type: string
            service_id:
              $ref: '#/components/schemas/ServiceId'
            authorized_recipients:
              description: |-
                If non empty, the service will be able
                to send messages only to these fiscal codes.
              type: array
              items:
                $ref: '#/components/schemas/FiscalCode'
            max_allowed_payment_amount:
              description: >-
                Maximum amount in euro cents that a service is allowed to charge
                to a user.
              type: integer
              minimum: 0
              maximum: 9999999999
              default: 0
          required:
            - service_id
            - authorized_recipients
    ServiceMetadata:
      x-one-of: true
      allOf:
        - $ref: '#/components/schemas/StandardServiceMetadata'
        - $ref: '#/components/schemas/SpecialServiceMetadata'
        - $ref: '#/components/schemas/CommonServiceMetadata'
    StandardServiceMetadata:
      allOf:
        - $ref: '#/components/schemas/CommonServiceMetadata'
        - type: object
          properties:
            category:
              type: string
              x-extensible-enum:
                - STANDARD
          required:
            - category
    SpecialServiceMetadata:
      allOf:
        - $ref: '#/components/schemas/CommonServiceMetadata'
        - type: object
          properties:
            category:
              type: string
              x-extensible-enum:
                - SPECIAL
            custom_special_flow:
              type: string
              minLength: 1
          required:
            - category
    CommonServiceMetadata:
      type: object
      description: A set of metadata properties related to this service.
      properties:
        description:
          type: string
          minLength: 1
        web_url:
          type: string
          minLength: 1
        app_ios:
          type: string
          minLength: 1
        app_android:
          type: string
          minLength: 1
        tos_url:
          type: string
          minLength: 1
        privacy_url:
          type: string
          minLength: 1
        address:
          type: string
          minLength: 1
        phone:
          type: string
          minLength: 1
        email:
          type: string
          minLength: 1
        pec:
          type: string
          minLength: 1
        cta:
          type: string
          minLength: 1
        token_name:
          type: string
          minLength: 1
        support_url:
          type: string
          minLength: 1
        scope:
          $ref: '#/components/schemas/ServiceScope'
      required:
        - scope
    ServiceScope:
      type: string
      x-extensible-enum:
        - NATIONAL
        - LOCAL
    ServiceId:
      type: string
      description: |-
        The ID of the Service. Equals the subscriptionId of a registered
        API user.
      minLength: 1
    ServiceName:
      type: string
      description: The name of the service. Will be added to the content of sent messages.
      minLength: 1
    OrganizationName:
      type: string
      description: |-
        The organization that runs the service. Will be added to the content
        of sent messages to identify the sender.
      minLength: 1
    DepartmentName:
      type: string
      description: |-
        The department inside the organization that runs the service. Will
        be added to the content of sent messages.
      minLength: 1
    PaymentDataBase:
      type: object
      description: Metadata needed to process pagoPA payments.
      properties:
        amount:
          description: >-
            Amount of payment in euro cent. PagoPA accepts up to 9999999999 euro
            cents.
          type: integer
          minimum: 1
          maximum: 9999999999
        notice_number:
          description: >-
            The field ["Numero
            Avviso"](https://pagopa-specifichepagamenti.readthedocs.io/it/latest/_docs/Capitolo7.html#il-numero-avviso-e-larchivio-dei-pagamenti-in-attesa)
            of pagoPa, needed to identify the payment. Format is `<aux digit
            (1n)>[<application code> (2n)]<codice IUV (15|17n)>`. See [pagoPa
            specs](https://www.agid.gov.it/sites/default/files/repository_files/specifiche_attuative_pagamenti_1_3_1_0.pdf)
            for more info on this field and the IUV.
          type: string
          pattern: ^[0123][0-9]{17}$
        invalid_after_due_date:
          type: boolean
          default: false
      required:
        - amount
        - notice_number
    PaymentData:
      allOf:
        - $ref: '#/components/schemas/PaymentDataBase'
        - type: object
          properties:
            payee:
              $ref: '#/components/schemas/Payee'
    Payee:
      type: object
      description: Metadata needed to explicit payment's payee.
      properties:
        fiscal_code:
          $ref: '#/components/schemas/OrganizationFiscalCode'
      required:
        - fiscal_code
    PaymentDataWithRequiredPayee:
      allOf:
        - $ref: '#/components/schemas/PaymentDataBase'
        - type: object
          properties:
            payee:
              $ref: '#/components/schemas/Payee'
          required:
            - payee
    LegalData:
      type: object
      properties:
        sender_mail_from:
          type: string
          minLength: 1
        has_attachment:
          type: boolean
          default: false
        message_unique_id:
          type: string
          minLength: 1
        original_message_url:
          type: string
          minLength: 1
        pec_server_service_id:
          $ref: '#/components/schemas/ServiceId'
      required:
        - sender_mail_from
        - has_attachment
        - message_unique_id
    SubscriptionKeys:
      required:
        - primary_key
        - secondary_key
      type: object
      properties:
        primary_key:
          type: string
        secondary_key:
          type: string
    ServiceWithSubscriptionKeys:
      allOf:
        - $ref: '#/components/schemas/Service'
        - $ref: '#/components/schemas/SubscriptionKeys'
    ServiceIdCollection:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ServiceId'
    Logo:
      required:
        - logo
      type: object
      properties:
        logo:
          minLength: 1
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
    SubscriptionKeyTypePayload:
      required:
        - key_type
      type: object
      properties:
        key_type:
          $ref: '#/components/schemas/SubscriptionKeyType'
    SubscriptionKeyType:
      type: string
      x-extensible-enum:
        - PRIMARY_KEY
        - SECONDARY_KEY
    CreatedMessage:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the created message.
  parameters:
    LegalMail:
      name: legalmail
      in: path
      description: The legal mail related to a legal message' s sender.
      required: true
      schema:
        type: string
        format: EmailString
        x-import: italia-ts-commons/lib/strings
      example: demo@pec.it
      x-import: italia-ts-commons/lib/strings
    FiscalCode:
      name: fiscal_code
      in: path
      description: The fiscal code of the user, all upper case.
      required: true
      schema:
        maxLength: 16
        minLength: 16
        pattern: >-
          [A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]
        type: string
      example: SPNDNL80R13C555X
    DateUTC:
      name: date
      in: path
      description: A date in the format YYYY-MM-DD.
      required: true
      schema:
        maxLength: 10
        minLength: 10
        pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
        type: string
      example: '2019-09-15'
    OrganizationFiscalCode:
      name: organization_fiscal_code
      in: path
      description: Organization fiscal code.
      required: true
      schema:
        type: string
        format: OrganizationFiscalCode
        x-import: italia-ts-commons/lib/strings
      x-import: italia-ts-commons/lib/strings
  securitySchemes:
    SubscriptionKey:
      type: apiKey
      description: >-
        The API key obtained through the developer portal or the getService
        operation.
      name: Ocp-Apim-Subscription-Key
      in: header
